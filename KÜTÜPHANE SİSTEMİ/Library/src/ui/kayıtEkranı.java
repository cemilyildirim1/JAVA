
import javax.swing.JFrame;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import jdk.jshell.spi.ExecutionControl;
import java.sql.PreparedStatement;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author cemil
 */
public class kayıtEkranı extends javax.swing.JFrame {

    /**
     * Creates new form kayıtEkranı
     */
    public kayıtEkranı() {
        initComponents();
    }
    public ArrayList<Users> getUsers() throws SQLException{
            Connection connection = null;
            Statement statement=null;
            ResultSet resultSet;
            ArrayList<Users> users = new ArrayList<>();
            
        try{
            connection = DbHelperSingleton.getConnection();
            System.out.println("Baglanti basarili.");
            statement = connection.createStatement();
            resultSet = statement.executeQuery("select * from users");
            
            while(resultSet.next()){
                users.add(new Users(
                        resultSet.getInt("id"),
                        resultSet.getString("user_name"),
                        resultSet.getString("user_surname"),
                        resultSet.getString("mail"),
                        resultSet.getString("password")
                )
                );
            }
            
        }catch(SQLException exception){
            DbHelperSingleton.showErrorMessage(exception);
        }finally{
            statement.close();
            connection.close();
        }
        
        return users;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegister = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblSurname = new javax.swing.JLabel();
        lblMail = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        btnBackToLogin = new javax.swing.JButton();
        lblEmptyName = new javax.swing.JLabel();
        lblEmptyMail = new javax.swing.JLabel();
        lblEmptySurname = new javax.swing.JLabel();
        lblEmptyPassword = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRegister.setText("Kaydol");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblName.setText("Ad :");

        lblSurname.setText("Soyad :");

        lblMail.setText("E-mail :");

        lblPassword.setText("Şifre :");

        btnBackToLogin.setText("Giriş Ekranına Dön");
        btnBackToLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(363, 363, 363)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtMail))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPassword)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBackToLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRegister)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtPassword)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmptySurname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblEmptyPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEmptyName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEmptyMail, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblMail, lblName, lblPassword, lblSurname});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmptyName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmptySurname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmptyMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmptyPassword))
                .addGap(31, 31, 31)
                .addComponent(btnRegister)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBackToLogin)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblMail, lblName, lblPassword, lblSurname, txtMail, txtName, txtPassword, txtSurname});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackToLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToLoginActionPerformed
        this.dispose();
        girisEkranı gEkranı = new girisEkranı();
        gEkranı.setVisible(true);
        gEkranı.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_btnBackToLoginActionPerformed

    public static boolean isValidEmail(String email) {
        boolean isValid = false;
        try {
            // Geçerli bir e-posta adresi
            InternetAddress validAddress = new InternetAddress(email);
            validAddress.validate();
            isValid = true;
        } catch (AddressException e) {
            // Hatalı e-posta adresi
            isValid = false;
        }
        return isValid;
    }
    
    
    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        
        

        Connection connection1=null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        
        try{
            
            connection = DbHelperSingleton.getConnection();
            String message = "Bu alanı doldurunuz";
            if(txtName.getText().isEmpty()){
                lblEmptyName.setText(message);
                try{
                    connection.close();
                }catch(SQLException e){
                    System.err.println(e);
                }
            }else{
                lblEmptyName.setText("");
            }
            if(txtSurname.getText().isEmpty()){
                lblEmptySurname.setText(message);
                try{
                    connection.close();
                }catch(SQLException e){
                    System.err.println(e);
                }
            }else{
                lblEmptySurname.setText("");
            }
            if(txtMail.getText().isEmpty()){
                lblEmptyMail.setText(message);
                try{
                    connection.close();
                }catch(SQLException e){
                    System.err.println(e);
                }
            }else{
                lblEmptyMail.setText("");
            }
            if(txtPassword.getText().isEmpty()){
                lblEmptyPassword.setText(message);
                try{
                    connection.close();
                }catch(SQLException e){
                    System.err.println(e);
                }
            }else{
                lblEmptyPassword.setText("");
            }
            int ctrl =0;
                try{
                    for(Users user : getUsers()){
                        if(txtName.getText().isEmpty() || txtPassword.getText().isEmpty()|| txtSurname.getText().isEmpty()){
                            ctrl +=1;
                            throw new Exception("Alanlar boş hatası");
                            
                                    
                        }else if(user.getMail().equals(txtMail.getText())){
                                
                                JOptionPane.showMessageDialog(null, "Kayıtlı E-posta\n(E-posta sistemde mevcuttur.) " , "E-posta Hatası", JOptionPane.ERROR_MESSAGE);
                                
                                throw new Exception("Kayıtlı e-posta");
                        }else if(user.getUser_name().equals(txtName.getText())){
                            ctrl +=1;
                            JOptionPane.showMessageDialog(null, "Kayıtlı isim lütfen isminize harf veya sayı ekleyiniz. " , "Kullanıcı adı hatası", JOptionPane.ERROR_MESSAGE);
                            throw new Exception("Kayıtlı isim");
                        }
                }    
            }
            catch(Exception e){
                    System.err.println(e);
                }
                if(ctrl ==0){
                    try{
                        String email = txtMail.getText();
                        if (isValidEmail(email)) {
                        JOptionPane.showMessageDialog(null, "Geçerli e-posta adresi", "Başarılı", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                         ctrl +=1;
                         JOptionPane.showMessageDialog(null, "Hatalı e-posta adresi \n(OGR_NO.ogr.klu.edu.tr) gibi deneyin.", "Hata", JOptionPane.ERROR_MESSAGE);
                         throw new Exception("GEÇERSİZ  e-posta");
                                        }  
                    }catch(Exception e){
                        System.err.println(e);
                    }
                        } 
                        
                    if(ctrl==0){
                    connection = DbHelperSingleton.getConnection();
                    String sql = "insert into users (user_name,user_surname,password,mail) values(?,?,?,?)";
                    preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1,txtName.getText());
                    preparedStatement.setString(2,txtSurname.getText());
                    preparedStatement.setString(3,txtPassword.getText());
                    preparedStatement.setString(4,txtMail.getText());
                    int result = preparedStatement.executeUpdate();
                    if(result==1){
                        JOptionPane.showMessageDialog(null, "KAYIT BAŞARILI" , "", JOptionPane.INFORMATION_MESSAGE);
                        
                        Connection connection2 = null;
                        Statement statement = null;
                        try{
                            connection2 = DbHelperSingleton.getConnection();
                            statement = connection2.createStatement();
                            String createTable = "create table a"+ txtMail.getText() +"(" +
                                                    "id int PRIMARY KEY," +
                                                    "book_name varchar(80)," +
                                                    "writer varchar(30)," +
                                                    "page_number int," +
                                                    "type varchar(30)," +
                                                    "barrowTime TIMESTAMP " +
                                                    ");";
                            statement.executeUpdate(createTable);
                        }catch(SQLException exception){
                            System.err.println(exception.getMessage());
                        }
                    }
                    }
            
            }catch(SQLException exception){
                System.err.println(exception);

            }finally{
            try{
                
                preparedStatement.close();
                connection.close();

                }catch(SQLException exception){
                    DbHelperSingleton.showErrorMessage(exception);
                    }
                    
                    }
    }//GEN-LAST:event_btnRegisterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(kayıtEkranı.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(kayıtEkranı.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(kayıtEkranı.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kayıtEkranı.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new kayıtEkranı().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel lblEmptyMail;
    private javax.swing.JLabel lblEmptyName;
    private javax.swing.JLabel lblEmptyPassword;
    private javax.swing.JLabel lblEmptySurname;
    private javax.swing.JLabel lblMail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtSurname;
    // End of variables declaration//GEN-END:variables
}
